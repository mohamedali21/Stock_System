//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Stock_System
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Stock_SystemEntities : DbContext
    {
        public Stock_SystemEntities()
            : base("name=Stock_SystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Employee_Attendance> Employee_Attendance { get; set; }
        public virtual DbSet<Employee_Salary> Employee_Salary { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Purchase_Order> Purchase_Order { get; set; }
        public virtual DbSet<Purchase_Order_Detalis> Purchase_Order_Detalis { get; set; }
        public virtual DbSet<Purchase_Returned_Cheque> Purchase_Returned_Cheque { get; set; }
        public virtual DbSet<Purchase_Returned_Cheque_Details> Purchase_Returned_Cheque_Details { get; set; }
        public virtual DbSet<Sales_Order> Sales_Order { get; set; }
        public virtual DbSet<Sales_Order_Details> Sales_Order_Details { get; set; }
        public virtual DbSet<Sales_Returned_Cheque> Sales_Returned_Cheque { get; set; }
        public virtual DbSet<Sales_Returned_Cheque_Details> Sales_Returned_Cheque_Details { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
    
        public virtual int Create_Salles_Order_Proc(string order_Type, Nullable<int> employee_Id, string customer_Name, string user_Name, Nullable<System.DateTime> salles_Date, string payment_Type, Nullable<int> num_Of_Product, Nullable<int> invoice_Amount, Nullable<double> invoice_Discount, Nullable<double> amount_After_Discount, Nullable<int> paid_Amount, Nullable<int> remain_Amount)
        {
            var order_TypeParameter = order_Type != null ?
                new ObjectParameter("Order_Type", order_Type) :
                new ObjectParameter("Order_Type", typeof(string));
    
            var employee_IdParameter = employee_Id.HasValue ?
                new ObjectParameter("Employee_Id", employee_Id) :
                new ObjectParameter("Employee_Id", typeof(int));
    
            var customer_NameParameter = customer_Name != null ?
                new ObjectParameter("Customer_Name", customer_Name) :
                new ObjectParameter("Customer_Name", typeof(string));
    
            var user_NameParameter = user_Name != null ?
                new ObjectParameter("User_Name", user_Name) :
                new ObjectParameter("User_Name", typeof(string));
    
            var salles_DateParameter = salles_Date.HasValue ?
                new ObjectParameter("Salles_Date", salles_Date) :
                new ObjectParameter("Salles_Date", typeof(System.DateTime));
    
            var payment_TypeParameter = payment_Type != null ?
                new ObjectParameter("Payment_Type", payment_Type) :
                new ObjectParameter("Payment_Type", typeof(string));
    
            var num_Of_ProductParameter = num_Of_Product.HasValue ?
                new ObjectParameter("Num_Of_Product", num_Of_Product) :
                new ObjectParameter("Num_Of_Product", typeof(int));
    
            var invoice_AmountParameter = invoice_Amount.HasValue ?
                new ObjectParameter("Invoice_Amount", invoice_Amount) :
                new ObjectParameter("Invoice_Amount", typeof(int));
    
            var invoice_DiscountParameter = invoice_Discount.HasValue ?
                new ObjectParameter("Invoice_Discount", invoice_Discount) :
                new ObjectParameter("Invoice_Discount", typeof(double));
    
            var amount_After_DiscountParameter = amount_After_Discount.HasValue ?
                new ObjectParameter("Amount_After_Discount", amount_After_Discount) :
                new ObjectParameter("Amount_After_Discount", typeof(double));
    
            var paid_AmountParameter = paid_Amount.HasValue ?
                new ObjectParameter("Paid_Amount", paid_Amount) :
                new ObjectParameter("Paid_Amount", typeof(int));
    
            var remain_AmountParameter = remain_Amount.HasValue ?
                new ObjectParameter("Remain_Amount", remain_Amount) :
                new ObjectParameter("Remain_Amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Create_Salles_Order_Proc", order_TypeParameter, employee_IdParameter, customer_NameParameter, user_NameParameter, salles_DateParameter, payment_TypeParameter, num_Of_ProductParameter, invoice_AmountParameter, invoice_DiscountParameter, amount_After_DiscountParameter, paid_AmountParameter, remain_AmountParameter);
        }
    
        public virtual int CreatePurchaseOrderProc2(string order_Type, string emp_Name, Nullable<int> supplier_Id, Nullable<int> invoice_No, Nullable<System.DateTime> recieved_Date, Nullable<System.DateTime> issued_Date, string payment_Type, Nullable<int> num_Of_Product, Nullable<int> invoice_Amount, Nullable<int> paid_Amount, Nullable<int> remain_Amount)
        {
            var order_TypeParameter = order_Type != null ?
                new ObjectParameter("Order_Type", order_Type) :
                new ObjectParameter("Order_Type", typeof(string));
    
            var emp_NameParameter = emp_Name != null ?
                new ObjectParameter("Emp_Name", emp_Name) :
                new ObjectParameter("Emp_Name", typeof(string));
    
            var supplier_IdParameter = supplier_Id.HasValue ?
                new ObjectParameter("Supplier_Id", supplier_Id) :
                new ObjectParameter("Supplier_Id", typeof(int));
    
            var invoice_NoParameter = invoice_No.HasValue ?
                new ObjectParameter("Invoice_No", invoice_No) :
                new ObjectParameter("Invoice_No", typeof(int));
    
            var recieved_DateParameter = recieved_Date.HasValue ?
                new ObjectParameter("Recieved_Date", recieved_Date) :
                new ObjectParameter("Recieved_Date", typeof(System.DateTime));
    
            var issued_DateParameter = issued_Date.HasValue ?
                new ObjectParameter("Issued_Date", issued_Date) :
                new ObjectParameter("Issued_Date", typeof(System.DateTime));
    
            var payment_TypeParameter = payment_Type != null ?
                new ObjectParameter("Payment_Type", payment_Type) :
                new ObjectParameter("Payment_Type", typeof(string));
    
            var num_Of_ProductParameter = num_Of_Product.HasValue ?
                new ObjectParameter("Num_Of_Product", num_Of_Product) :
                new ObjectParameter("Num_Of_Product", typeof(int));
    
            var invoice_AmountParameter = invoice_Amount.HasValue ?
                new ObjectParameter("Invoice_Amount", invoice_Amount) :
                new ObjectParameter("Invoice_Amount", typeof(int));
    
            var paid_AmountParameter = paid_Amount.HasValue ?
                new ObjectParameter("Paid_Amount", paid_Amount) :
                new ObjectParameter("Paid_Amount", typeof(int));
    
            var remain_AmountParameter = remain_Amount.HasValue ?
                new ObjectParameter("Remain_Amount", remain_Amount) :
                new ObjectParameter("Remain_Amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePurchaseOrderProc2", order_TypeParameter, emp_NameParameter, supplier_IdParameter, invoice_NoParameter, recieved_DateParameter, issued_DateParameter, payment_TypeParameter, num_Of_ProductParameter, invoice_AmountParameter, paid_AmountParameter, remain_AmountParameter);
        }
    
        public virtual int Delete_Employee(Nullable<int> emp_Id)
        {
            var emp_IdParameter = emp_Id.HasValue ?
                new ObjectParameter("Emp_Id", emp_Id) :
                new ObjectParameter("Emp_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Employee", emp_IdParameter);
        }
    
        public virtual int Delete_Retuned_Sales_Invoice(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Retuned_Sales_Invoice", iDParameter);
        }
    
        public virtual ObjectResult<Emp_Invoices_Result> Emp_Invoices(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Emp_Invoices_Result>("Emp_Invoices", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Emp_Returned_Sales_Invoices_Result> Emp_Returned_Sales_Invoices(string emp_NId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var emp_NIdParameter = emp_NId != null ?
                new ObjectParameter("Emp_NId", emp_NId) :
                new ObjectParameter("Emp_NId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Emp_Returned_Sales_Invoices_Result>("Emp_Returned_Sales_Invoices", emp_NIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Emp_Sales_Invoices_Result> Emp_Sales_Invoices(string emp_NId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var emp_NIdParameter = emp_NId != null ?
                new ObjectParameter("Emp_NId", emp_NId) :
                new ObjectParameter("Emp_NId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Emp_Sales_Invoices_Result>("Emp_Sales_Invoices", emp_NIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int Insert_Purchase_Order_Detalis_Proc(Nullable<int> purchase_Order_Id, Nullable<int> product_Id, Nullable<int> quantity, Nullable<System.DateTime> expired_Date, Nullable<int> stock_Id)
        {
            var purchase_Order_IdParameter = purchase_Order_Id.HasValue ?
                new ObjectParameter("Purchase_Order_Id", purchase_Order_Id) :
                new ObjectParameter("Purchase_Order_Id", typeof(int));
    
            var product_IdParameter = product_Id.HasValue ?
                new ObjectParameter("Product_Id", product_Id) :
                new ObjectParameter("Product_Id", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var expired_DateParameter = expired_Date.HasValue ?
                new ObjectParameter("Expired_Date", expired_Date) :
                new ObjectParameter("Expired_Date", typeof(System.DateTime));
    
            var stock_IdParameter = stock_Id.HasValue ?
                new ObjectParameter("Stock_Id", stock_Id) :
                new ObjectParameter("Stock_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Purchase_Order_Detalis_Proc", purchase_Order_IdParameter, product_IdParameter, quantityParameter, expired_DateParameter, stock_IdParameter);
        }
    
        public virtual int Insert_Sales_Order(string emp_Name, string customerphone, string type, Nullable<System.DateTime> invoice_Date, Nullable<int> numberOfProducts, Nullable<double> invoiceAmount, Nullable<double> invoiceDiscount)
        {
            var emp_NameParameter = emp_Name != null ?
                new ObjectParameter("Emp_Name", emp_Name) :
                new ObjectParameter("Emp_Name", typeof(string));
    
            var customerphoneParameter = customerphone != null ?
                new ObjectParameter("Customerphone", customerphone) :
                new ObjectParameter("Customerphone", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var invoice_DateParameter = invoice_Date.HasValue ?
                new ObjectParameter("Invoice_Date", invoice_Date) :
                new ObjectParameter("Invoice_Date", typeof(System.DateTime));
    
            var numberOfProductsParameter = numberOfProducts.HasValue ?
                new ObjectParameter("NumberOfProducts", numberOfProducts) :
                new ObjectParameter("NumberOfProducts", typeof(int));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("invoiceAmount", invoiceAmount) :
                new ObjectParameter("invoiceAmount", typeof(double));
    
            var invoiceDiscountParameter = invoiceDiscount.HasValue ?
                new ObjectParameter("invoiceDiscount", invoiceDiscount) :
                new ObjectParameter("invoiceDiscount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Sales_Order", emp_NameParameter, customerphoneParameter, typeParameter, invoice_DateParameter, numberOfProductsParameter, invoiceAmountParameter, invoiceDiscountParameter);
        }
    
        public virtual int Insert_Sales_Order_Details(Nullable<int> sales_Order_Id, Nullable<int> product_Id, Nullable<int> quantity, Nullable<System.DateTime> expiredDate, Nullable<int> stock_Id)
        {
            var sales_Order_IdParameter = sales_Order_Id.HasValue ?
                new ObjectParameter("Sales_Order_Id", sales_Order_Id) :
                new ObjectParameter("Sales_Order_Id", typeof(int));
    
            var product_IdParameter = product_Id.HasValue ?
                new ObjectParameter("product_Id", product_Id) :
                new ObjectParameter("product_Id", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var expiredDateParameter = expiredDate.HasValue ?
                new ObjectParameter("ExpiredDate", expiredDate) :
                new ObjectParameter("ExpiredDate", typeof(System.DateTime));
    
            var stock_IdParameter = stock_Id.HasValue ?
                new ObjectParameter("Stock_Id", stock_Id) :
                new ObjectParameter("Stock_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Sales_Order_Details", sales_Order_IdParameter, product_IdParameter, quantityParameter, expiredDateParameter, stock_IdParameter);
        }
    
        public virtual int Insert_Sales_Order_Detalis_Proc(Nullable<int> sales_Order_Id, Nullable<int> product_Id, Nullable<int> quantity, Nullable<System.DateTime> expired_Date, Nullable<int> stock_Id)
        {
            var sales_Order_IdParameter = sales_Order_Id.HasValue ?
                new ObjectParameter("Sales_Order_Id", sales_Order_Id) :
                new ObjectParameter("Sales_Order_Id", typeof(int));
    
            var product_IdParameter = product_Id.HasValue ?
                new ObjectParameter("Product_Id", product_Id) :
                new ObjectParameter("Product_Id", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var expired_DateParameter = expired_Date.HasValue ?
                new ObjectParameter("Expired_Date", expired_Date) :
                new ObjectParameter("Expired_Date", typeof(System.DateTime));
    
            var stock_IdParameter = stock_Id.HasValue ?
                new ObjectParameter("Stock_Id", stock_Id) :
                new ObjectParameter("Stock_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Sales_Order_Detalis_Proc", sales_Order_IdParameter, product_IdParameter, quantityParameter, expired_DateParameter, stock_IdParameter);
        }
    
        public virtual int Insert_User(string n_Id, string emp_Name, string phone, string address, string job_Tiltle, Nullable<System.DateTime> hire_Date, string gender, string userName, string password, Nullable<double> salary, string active)
        {
            var n_IdParameter = n_Id != null ?
                new ObjectParameter("N_Id", n_Id) :
                new ObjectParameter("N_Id", typeof(string));
    
            var emp_NameParameter = emp_Name != null ?
                new ObjectParameter("Emp_Name", emp_Name) :
                new ObjectParameter("Emp_Name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var job_TiltleParameter = job_Tiltle != null ?
                new ObjectParameter("Job_Tiltle", job_Tiltle) :
                new ObjectParameter("Job_Tiltle", typeof(string));
    
            var hire_DateParameter = hire_Date.HasValue ?
                new ObjectParameter("Hire_Date", hire_Date) :
                new ObjectParameter("Hire_Date", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(double));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_User", n_IdParameter, emp_NameParameter, phoneParameter, addressParameter, job_TiltleParameter, hire_DateParameter, genderParameter, userNameParameter, passwordParameter, salaryParameter, activeParameter);
        }
    
        public virtual ObjectResult<prudctReport_Result> prudctReport(Nullable<System.DateTime> mydate)
        {
            var mydateParameter = mydate.HasValue ?
                new ObjectParameter("mydate", mydate) :
                new ObjectParameter("mydate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prudctReport_Result>("prudctReport", mydateParameter);
        }
    
        public virtual ObjectResult<prudctReportWithInterval_Result> prudctReportWithInterval(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("date1", date1) :
                new ObjectParameter("date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("date2", date2) :
                new ObjectParameter("date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prudctReportWithInterval_Result>("prudctReportWithInterval", date1Parameter, date2Parameter);
        }
    
        public virtual int Returned_Sales(Nullable<int> product_Id, Nullable<int> sales_Returned_Cheque_Id, Nullable<int> quantity, string description)
        {
            var product_IdParameter = product_Id.HasValue ?
                new ObjectParameter("product_Id", product_Id) :
                new ObjectParameter("product_Id", typeof(int));
    
            var sales_Returned_Cheque_IdParameter = sales_Returned_Cheque_Id.HasValue ?
                new ObjectParameter("Sales_Returned_Cheque_Id", sales_Returned_Cheque_Id) :
                new ObjectParameter("Sales_Returned_Cheque_Id", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Returned_Sales", product_IdParameter, sales_Returned_Cheque_IdParameter, quantityParameter, descriptionParameter);
        }
    
        public virtual int Delete_Retuned_Purchase_Invoice(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Retuned_Purchase_Invoice", iDParameter);
        }
    }
}
